Name: Introduction to NuDoc
Description: Learn the basics of the NuDoc markup format.
Slug: intro-to-nudoc
Date: 2024-12-10
Tags: nudoc, beginner, tutorial
---

* TODO: Check for spelling and typos.

This document is an introduction to the NuDoc hypertext format.

NuDoc is a line-oriented format that allows you to define
rich-text documents using a simple syntax.
NuDoc is mainly inspired from Markdown, Gemtext and HTML.

# Document header

| Documents must start with a header containing key-value pairs that define metadata such as:
- Name
- Description
- Slug
- Date
- Tags

Here's an example of a header:

``` nudoc
Name: Introduction to NuDoc
Description: Learn the basics of the NuDoc markup format.
Slug: intro-to-nudoc
Date: 2024-12-10
Tags: nudoc, beginner, tutorial
---
``` Example of a header.

# Defining content

Line prefixes are used to define rich-content.
Lines that don't start with any of the reserved prefixes are simply parsed
as regular text.

| Reserved line are:
- Topic line ("# ")
- Link line ("> ")
- List title line ("| ")
- List item line ("- ")
- Preformatted line ("' ")
- Line comment line ("* ")
- Preformatted block toggle ("```")
- Multiline comment toggle ("***")

# Topics

Topics are used to title a section of content.

A topic is the second highest level of heading (like a HTML `<h2>`).

``` nudoc
# Bananas
``` Example of a topic.

Note that the document's name is used like a HTML `<h1>` and meta `<title>`.

# Links

``` nudoc
> /fruits/banana Learn more about bananas!
``` Example of a link.

Which gets rendered as:

> /fruits/banana Learn more about bananas!

# Comments

If a line starts with "* ", consider the line to be a comment (until LF).

For example:

``` nudoc
* TODO: Refactor.
``` Example of a single line comment.

Multiline comments and footnotes:
if a line starts with "***", consider all next lines to be comments until "***" (or EOF)
is encountered.

``` nudoc
***
I'm a multiline comment.
I can span over multiple lines!
***
``` Example of a multiline comment.

Note that inline comments are deliberately not supported.

# Preformatted blocks and lines

A preformatted text block is simply text that is rendered "as is" in a monospace font.
They are similar to HTML peformatted tags (`<pre>`) tag and Markdown triple backticks ` ``` `.
There are useful for sharing code, ASCII art and much more.

Preformatted blocks are essential for software documentation because they mimic
how text would be rendered in a code editor or CLI environment.
Clients are also encouraged to make it easier for users to copy the preformatted content
by for instance, providing a "copy to clipboard" button or prompt.

The syntax is the following:

``` nudoc
```` bash
echo "Hello world!"
echo "Bonjour monde!"
```` Just some commands.
``` Example of a preformatted block.

Rendered as:

``` bash
echo "Hello world!"
echo "Bonjour monde!"
``` Just some commands.

In non-graphical environments, the client should provide to easily skip the 
preformatted block if it doesn't make sense to the client.
Note that alternative content can be defined in a separate block type (see "Alternative blocks").

For convenience, when the preformatted content is a just a single-line-tall and you don't
need metadata like the content type or legend, you may define it in a single line:

``` nudoc
' echo "Hello world!"
``` Example of a preformatted line.

Which is rendered as:

' echo "Hello world!"

# Alternative blocks

Alternative blocks are meant to be presented to the user only in non-graphical environments.

You may use them after defining preformatted content that may not be easily understandable
in a non-graphical context (ex: screen reader).

``` nudoc
~ I'm alternative content.
~ I may spread over multiple lines.
``` Example of a alternative block.

Which gets rendered as:

~ I'm alternative content.
~ I may spread over multiple lines.

Note that if you're in a graphical environments you may not be presented this alternative content.

***

We can reserve a line prefix to put the parser into "preformatted block" mode.
Then, we can also use a line prefix to known when the content ends.
We also need to be able to accept additional data such as the alternative text, a content type
and title.

Content types and title can be placed on one same line since they are expected to be short.
Since the content type has a standard MIME type format no space is expected, so let's put it first.
and then the title ends when we reach the end of the line.

However since the alternative content may be long (if the content also is),
the syntax should accomodate for several lines of input but should also
accept content on line that ends the block's body section.

For single line alternative content, we can place the text on line that ends the body.
So that there's no "overhead" in terms of number of lines of code.

We can use a different line prefix to indicate that the body section ended but that
we must parse the alternative content.
